---

#---VARIABLES---
#  vars:
  # More variables can be found in /defaults and /vars within the role

 #---CONFIGURATION---

   #---Playbooks---
    # Choose what you want installed
    # Most of these are dependent on each other so be careful when changing

#  |Playbook		|Description				|Tags					
    update: true         # Update Package list/cache		root, update			
    java: true           # Installs java			root, java
    mysql: true          # Installs Mysql			root, mysql, pexpect
    createuser: true     # Creates non-root user		createuser		
    container: true      # Installs glassfish/payara		user, container	
    authn: true          # Installs Authentication Plugins	user, authn, simple/db/ldap/anon
    icat_lucene: true    # Installs icat.lucene			user, lucene
    icat_server: true    # Installs Icat			user, icat
    ids_storage: true    # Installs IDS storage plugin
    ids_server: true     # Installs IDS server
    topcat: true         # Installs Topcat			user, topcat
    testdata: true       # Ingests data with python-icat	user, pycat, testdata
    cleanup: true        # Moves unused files into download_dir root, cleanup
    selenium: false      # Setup test env for selenium		selenium

# Selenium is only needed for travis testing

   #---Version Numbers---
    # These must not be left blank otherwise a syntax error will be returned. Even if the software isn't used.
    
    # Containers
    glassfish_version: 4.0
    payara_version: 4.1.2.174
   
    # Authenticators
    simple_version: 2.0.0
    db_version: 2.0.0
    ldap_version: 2.0.0
    anon_version: 2.0.0

    # ICAT and Plugins
    icat_lucene_version: 1.1.0
    icat_server_version: 4.9.1
    ids_storage_version: 1.4.0
    ids_server_version: 1.8.0
    topcat_version: 2.4.0
    
    pycat_version: 0.13.1

    # Selenium
     # ts = topcat selenium test script, use 'master' for latest
    ts_version: master

    geckodriver_version: 0.19.1
    chromedriver_version: 2.35

   #---Container---
    # One and only one of these must be enabled, comment out the other

#    container_name: glassfish
    container_name: payara


   #---Authentication Plugins---
    # At least one of these must be installed but any combination of multiple should work
    # Anon authenticator should work on it's own but it is recomended that you use one of the other plugins for the database root user     

    authn_simple: true
    authn_db: true
    authn_ldap: false
    authn_anon: false

   
   #---ICAT Configure---
    # inventory_hostname = name used in hosts above
    # It's similar to using 'localhost' except topcat interface can used by browsers on remote machines
    # Explicitly setting inventory_hostname to the host's fqdn works for a local secure installation,
    # but the correct approach is probably to put the fqdn into tests/inventory
    inventory_hostname: host-172-16-114-102.nubes.stfc.ac.uk
 
    # insecure http/8080 configuration
    # icat_url: http://{{ inventory_hostname }}:{{ icat_port }}
    # icat_port: 8080
    # secure https configuration
    icat_url: https://{{ inventory_hostname }}:{{ icat_port }}
    icat_port: 8181
    # URL used to access database

    icat_name: icat
    # Name of the database

    # fac_short_name is used by urls, topcat.json and ingest
    # fac_long_name is used by topcat.json
    fac_short_name: LILS
    fac_long_name: Lorum Ipsum Light Source 


  #---Reponse to duplicate facilities for icatingest.py---(pycat.yml)
   # The icatingest.py script for TestData cannot overwrite existing facilities and users
   # If you wish to remove existing facilties use ONE of the methods below:
    # 'wipe_icat: true' 	Will remove all populating data from the database (tables will remain but be empty). Some metadata and PASSWD table will be untouched
    # 'delete_fac: true'	Will grab the ID of the facility and delete all data with that id, it will also remove all users generated by the lils.yml ingest
    # Leaving all false 	Will skip icatingest.py if it finds an already existing facilty with the {{ fac_short_name }} name.

    wipe_icat: false
    delete_fac: true


  #---Ingest timeout---
   # The current ingest file is large and takes a lot of time to complete.
   # Use this variable to force timeout the ingest after a specific ammount of seconds
   # NOTE: I think this is currently setup to run until the timeout, even if the ingest is complete

    ingest_timeout: 60

   
  #---Creating files for TestData---
   # icatingest.py does not actually create any files, it just generates the meta data used by the database
   # for proper testing some files must be created
   # Selecting individual files is complicated in this setup so instead the following methods will create every file matching certain conditions
   # Note these will create every file they find, even if their facility has been deleted with 'delete_fac' (use wipe_icat to remove all entries)

    # Create every file of a specific name(s)
    create_file: true
    datafiles:
      - Datafile 1
#      - Datafile 2

    # This will create everyfile listed in DATAFILE, including those from other facilities
    create_all: false


 #---END OF CONFIGURATION---

 #---USERS---
  # Passwords can be clear text or hash encrypted with '$'
   # Clear text passwords must not start with '$'
 
   #---Non-Root System User---
    # The user that will run all non-root tasks

    user_name: glassfish
    user_pass: bubbleicatcar

    user_home: "/home/{{ user_name }}"
    download_dir: "{{ user_home }}/icatdownloads/"
    # Directories used for downloads and installs, not tested outdside default


   #---MySQL User---
    # All MySQL commands will be run as root user if needed

    mysql_root_pass: pw
    # If Mysql is already installed and configured, set this to current root pass

    mysql_user: icat
    mysql_pass: icat


   #---Database Admin User---
    # NOTE - currently admin user gets data as well, thus data user is redundent until the admin user is split into data/admin

    # These users must be included in the lists below or on LDAP (eg. default admin user is same as first in authn_simple_users)
     # mech = the mnemonic for the plugin used by the respective user, must be an enabled authn plugin
     # user = username of the respective user
     # pass = password of the respective user

    # TODO - figure out how to separate data user and admin (currently same user)
    # icat_data = The user with access to the testdata
    #icat_data_mech: simple
    #icat_data_user: root
    #icat_data_pass: pass

    # icat_admin = The Admin user of topcat, can be same as icat_data
    icat_admin_mech: simple
    icat_admin_user: root
    icat_admin_pass: pass


   #---Simple Authn Users---
    # These users will be added to authn_simple.properties
    # In theory this should handle as many users as you wish so long as you use the format below    
   
    authn_simple_users:
      - user: root
        pass: pass
 
      - user: user1
        pass: pass1
     
    #-end of simple users-


   #---DB Authn Users---
    # These users will be added to a PASSWD table within the database

    authn_db_users: 
      - user: root
        pass: password
  
      - user: notroot
        pass: password
      
      - user: piOne
        pass: piOne

      - user: piTwo
        pass: piTwo

      - user: guest
        pass: guess

    #-end of db users-


   #---Ldap Users---
    # I don't actually know how ldap works yet but I think these are important
    
    ldap_provider: ldap://logon05.fed.cclrc.ac.uk
    # provider_url =
    
    ldap_principal: \%\@fed.cclrc.ac.uk
    # security_principal =

    #-end of ldap users---


 #---END OF USERS---


#---END OF VARIABLES---


# The authn.yml playbook will be run multiple times for each plugin set to true.
 # Inside this playbook are several tasks that will fail conditionals if a plugin is false for each run
 # This means that even if you have simple and db set to true, it will report skipping db tasks on the first run
 # then automatically run again reporting skips on simple tasks.
 # The task name will tell you which plugin is currently being handled.

# Some tasks have 'ignore_errors: yes' on them
 # This means they will move on to the next task even if a fatal error is returned
 # Tasks with ignore errors:
  # Storage setup script        (storage.yml)           Final line of script fails but job is still accomplished
 # Tasks with conditional ignore errors:
  # MySQL root pass reset 	(mysql.yml)		Fails if return code is anything other than 0 (Pass) or 1 (permission denied) 	Will return errors on first run since password won't be mysql_root_pass
  # icatingest.py		(pycat.yml)		Fails if fail output is anything other than async timeout			Takes too long, forced timeout still produces data
 # I shall attempt to find a better workaround for these in future

# See README.md for more information
