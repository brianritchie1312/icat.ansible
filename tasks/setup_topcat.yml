---

- name: "{{ play_name }}Starting {{ container_domain }} before tasks"
  include: "include_startdomain.yml"

#---

#---Downloading TopCat---

- name: "{{ play_name }}Downloading TopCat"
  include: "include_download.yml"
  vars:
    - download_zip: "{{ topcat_zip }}"
    - download_src: "{{ topcat_src }}"
    - download_path: "{{ topcat_path }}"
    - download_dest: "{{ user_home }}"

#---

#---Setup Properties File

- name: "{{ play_name }}Checking if {{ topcat_setup }} exists"
  stat:
    path: "{{ topcat_path }}/{{ topcat_setup }}"
  register: tp_setup

- name: "{{ play_name }}Copying {{ topcat_setup }}.example"
  copy:
    src: "{{ topcat_path }}/{{ topcat_setup }}.example"
    dest: "{{ topcat_path }}/{{ topcat_setup }}"
    remote_src: yes
  when:
    - tp_setup.stat.exists == false 

- name: "{{ play_name }}Configuring {{ topcat_setup }}"
  lineinfile:
    path: "{{ topcat_path }}/{{ topcat_setup }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items: "{{ topcat_cnf_list }}"
   
- name: "{{ play_name }}Adding 'mail.enable = {{ email_enable }}' to versions before 2.3.0"
  lineinfile:
    path: "{{ topcat_path }}/{{ topcat_setup }}"
    regexp: "^mail\\enable"
    line: "mail.enable = {{ email_enable }}"
  when:
    - topcat_version | version_compare('2.3.0','<=')

#---

#---Properties File---

- name: "{{ play_name }}Checking if {{ topcat_prop }} exists"
  stat:
    path: "{{ topcat_path }}/{{ topcat_prop }}"
  register: tp_prop      

- name: "{{ play_name }}Creating {{ topcat_prop }}"
  copy:
    src: "{{ topcat_path }}/{{ topcat_prop }}.example"
    dest: "{{ topcat_path }}/{{ topcat_prop }}"
    remote_src: yes
  when:
    - tp_prop.stat.exists == false
  
- name: "{{ play_name }}Configuring {{ topcat_prop }}"
  lineinfile:
    path: "{{ topcat_path }}/{{ topcat_prop }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: "^mail\\enable",    line: "mail.enable = {{ email_enable }}"}
    - { regexp: "^ids\\getStatus",  line: "ids.getStatus.max = 100" }
    - { regexp: "^poll\\delay",     line: "poll.delay = 600" }
    - { regexp: "^poll\\interval",  line: "poll.interval.wait = 600" }
    - { regexp: "^adminUserNames",  line: "adminUserNames = {{ icat_admin_mech }}/{{ icat_admin_user }}" }

#---

#---Json Files---

- name: "{{ play_name }}Creating {{ topcat_json }}, {{ topcat_lang }} and {{ topcat_css }}"
  copy:
    src: "{{ topcat_path }}/{{ item }}.example"
    dest: "{{ topcat_path }}/{{ item }}"
    remote_src: yes
    force: no
  with_items:
    - "{{ topcat_json }}"
    - "{{ topcat_lang }}"
    - "{{ topcat_css }}"

  # First item uses 'https://' to avoid changing transport type variable, older versions have no 'http' type
  # 'your facility...' is the placeholder for older versions, 'LILS' is the placeholder for newer versions. There is only one occurance of either and replace won't add anything if the regexp doesn'y match, so it should be safe to have them both in this task regardless of which actually get's used
- name: "{{ play_name }}Configuring {{ topcat_json }}"
  replace:
    path: "{{ topcat_path }}/{{ topcat_json }}"
    regexp: "{{ item.regexp }}"
    replace: "{{ item.rep }}"
  with_items:
    - { regexp: "https://",                 rep: "http://" }
    - { regexp: "8181",                     rep: "{{ icat_port }}" }
    - { regexp: "18080",                    rep: "{{ icat_port }}" }
    - { regexp: "localhost",                rep: "{{ inventory_hostname }}" }
    - { regexp: '"your facility name[^"]*', rep: '"{{ fac_short_name }}' }
    - { regexp: 'LILS',                     rep: '{{ fac_short_name }}' }
    - { regexp: 'Lorum Ipsum Light Source', rep: "{{ fac_long_name }}" }



#---
# TODO replace with task to remove all facilities not in mysql \/
#---

# Missing the icat_url variable in a facility breaks older versions of topcat, so the variable is needed even if not used
- name: "{{ play_name }}Correcting missing icat_url variable errors in ISIS facilty in JSON file"
  replace:
    path: "{{ topcat_path }}/{{ topcat_json }}"
    regexp: '"title": "ISIS",(?s)(.*?)"hierarchy"'
    replace: '"title": "ISIS",
\n            "idsUrl": "",
\n            "icatUrl": "",
\n            "hierarchy"'
  when:
    - topcat_version | version_compare('2.3.0','>=') == true

#---

#---JSON AUTHENTICATORS---    
 # Authns are added then removed because using lineinfile, to add lines, will only replace the last instance
 # If multiple facilities are present then only the last will change
 # Pending any methods of guaranteeing the correct facility is modified, this will change all of them

#-Add all plugins to topcat.json-

- name: "{{ play_name }}Adding Authentication types to {{ topcat_json }}"
  replace:
    path: "{{ topcat_path }}/{{ topcat_json }}"
    regexp: '"authenticationTypes": \[(?s)(.*?)\]'
    replace: '"authenticationTypes": [
\n                { "title": "Simple", "plugin": "simple" }
\n                { "title": "DB",     "plugin": "db" }
\n                { "title": "LDAP",   "plugin": "ldap" }
\n                { "title": "Anon",   "plugin": "anon" }
\n            ]'    


#-Remove unused plugins-
 # TODO - Use better regexp

- name: "{{ play_name }}Removing Authn Simple from topcat.json if not enabled"
  replace:
    path: "{{ topcat_path }}/{{ topcat_json }}"
    regexp: '\n                { "title": "Simple", "plugin": "simple" }'
    replace: ''
  when:
    - authn_simple == false

- name: "{{ play_name }}Removing Authn DB from topcat.json if not enabled"
  replace:
    path: "{{ topcat_path }}/{{ topcat_json }}"
    regexp: '\n                { "title": "DB",     "plugin": "db" }'
    replace: ''
  when:
    - authn_db == false

- name: "{{ play_name }}Removing Authn LDAP from topcat.json if not enabled"
  replace:
    path: "{{ topcat_path }}/{{ topcat_json }}"
    regexp: '\n                { "title": "LDAP",   "plugin": "ldap" }'
    replace: ''
  when:
    - authn_ldap == false

- name: "{{ play_name }}Removing Authn Anon from topcat.json if not enabled"
  replace:
    path: "{{ topcat_path }}/{{ topcat_json }}"
    regexp: '\n                { "title": "Anon",   "plugin": "anon" }'
    replace: ''
  when:
    - authn_anon == false


#-Add commas-
 # This will add a comma to each plugin if the plugins after it exist
 # This is an imperfect solution as it requires the four plugins to be in a specific order 

- name: "{{ play_name }}Adding comma after Simple if other plugins are installed"
  replace:
    path: "{{ topcat_path }}/{{ topcat_json }}"
    regexp: '"plugin": "simple" }'
    replace: '"plugin": "simple" },'
  when:
    - authn_simple == true
    - ( authn_db == true ) or ( authn_ldap == true ) or ( authn_anon == true )

- name: "{{ play_name }}Adding comma after DB if LDAP/Anon plugins are installed"
  replace:
    path: "{{ topcat_path }}/{{ topcat_json }}"
    regexp: '"plugin": "db" }'
    replace: '"plugin": "db" },'
  when:
    - authn_db == true
    - ( authn_ldap == true ) or ( authn_anon == true )

- name: "{{ play_name }}Adding comma after LDAP if other plugins are installed"
  replace:
    path: "{{ topcat_path }}/{{ topcat_json }}"
    regexp: '"plugin": "ldap" }'
    replace: '"plugin": "ldap" },'
  when:
    - authn_ldap == true
    - authn_anon == true

#---

#---Content Folder---

- name: "{{ play_name }}Copying content.example for version newer than 2.3.0"
  command: cp {{ content_path }}.example {{ content_path }} -r
  vars:
    content_path: "{{ topcat_path }}/content"
  when:
    - topcat_version | version_compare('2.3.0', '>=')


#---Running Setup---

- name: "{{ play_name }}Installing TopCat"
  environment:
    PATH: "{{ container_path }}/bin:{{ ansible_env.PATH }}"
  shell:
    cmd: ./setup install
    chdir: "{{ topcat_path }}"
  tags:
    - install

#---

#--Quick Test--

- name: "{{ play_name }}Checking Installed TopCat Version"
  command: "curl -k {{ icat_url }}/topcat/version"
  register: curl_topcat

- name: "{{ play_name }}Failing If TopCat Output Incorrect"
  fail:
    msg:
      - 'TopCat has a problem.'
      - 'Expected stdout: "{"version":"{{ topcat_version }}"}"'
      - 'Actual stdout:   "{{ curl_topcat.stdout }}"'
      - 'NOTE: Only version number is check all other text and syntax are ignored.'
  when:
    - topcat_version not in curl_topcat.stdout

#---
