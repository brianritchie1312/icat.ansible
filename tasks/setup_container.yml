---

#---Download Container---

- name: "{{ play_name }}Downloading and Unzipping {{ container_zip }}"
  include: "include_download.yml"
  vars:
    - download_zip: "{{ container_zip }}"
    - download_src: "{{ container_src }}"
    - download_path: "{{ container_path }}"
    - download_dest: "{{ user_home }}"

#---

#---Download Glassfish setup script---

- name: "{{ play_name }}Checking if setup-glassfish.py exists"
  stat:
    path: "{{ user_home }}/setup-glassfish.py"
  register: ctr_script

- name: "{{ play_name }}Downloading {{ container_name | title }} setup script"
  get_url:
    url: "{{ container_setup }}"
    dest: "{{ user_home }}"
  when: ctr_script.stat.exists == false

#---

#---Run Glassfish setup script---

- name: "{{ play_name }}Checking if {{ container_domain }} exists"
  stat:
    path: "{{ container_path }}/glassfish/domains/{{ container_domain }}"
  register: ctr_dom

- name: "{{ play_name }}Stopping {{ container_domain }}"
  environment:
    PATH: "{{ container_path }}/bin:{{ ansible_env.PATH }}"
  command: "nohup asadmin stop-domain {{ container_domain }}"
  when: ctr_dom.stat.exists == true

- name: "{{ play_name }}Running setup script"
  environment:
    PATH: "{{ container_path }}/bin:{{ ansible_env.PATH }}"
  command: "python {{ user_home }}/setup-glassfish.py {{ container_domain }} 75% {{ mysql_root_pass }}"
  tags:
    - install

#---

#---Importing Container Certificate Into Java Keystore---

#---

# The glassfish certificate folder should be
# "{{ container_path }}/glassfish/domains/{{ container_domain }}/config"

# export the certificate
- name: "{{ play_name }}Export the container certificate"
  shell:
    cmd: keytool -export -keystore keystore.jks -file cert.der -storepass changeit -alias s1as
    chdir: "{{ container_path }}/glassfish/domains/{{ container_domain }}/config"

# Find the JRE, and /lib/security
# 
- name: "{{ play_name }}Find the JRE"
  shell: which java
  register: java_loc

# Set java_security_folder
- set_fact:
    java_security_folder: "{{ java_loc.stdout | realpath | dirname }}/../lib/security"

- name: "{{ play_name }}Show java_security_folder value"
  debug:
    msg: "java_security_folder = {{ java_security_folder }}"

# Create jssecacerts if necessary
- name: "{{ play_name }}Checking if jssecacerts exists"
  stat:
    path: "{{ java_security_folder }}/jssecacerts"
  register: jsse_stat

- name: "{{ play_name }}create jssecacerts"
  copy:
    src: "{{ java_security_folder }}/cacerts"
    dest: "{{ java_security_folder }}/jssecacerts"
  become: yes
  become_user: root
  when: jsse_stat.stat.exists == false

# Import the glassfish certificate
- name: "Import container certificate into the JRE"
  shell:
    cmd: "keytool -import -keystore jssecacerts -file {{ container_path }}/glassfish/domains/{{ container_domain }}/config/cert.der -storepass changeit -alias {{ inventory_hostname }} -noprompt"
    chdir: "{{ java_security_folder }}"
  become: yes
  become_user: root
  tags:
    - root

#---Configuring Domain---

- name: "{{ play_name }}Finding mysql java connector"
  find:
    paths: /usr/share/java
    patterns: 'mysql-connector-java*.jar'
  register: sql_java

- name: "{{ play_name }}Moving Java Connector File for {{ container_domain }} and MySQL"
  copy:
    src: "{{ sql_java.files[0].path }}"
    dest: "{{ container_path }}/glassfish/domains/{{ container_domain }}/lib/ext/"
    remote_src: yes

- name: "{{ play_name }}Restarting {{ container_domain }}"
  environment:
    PATH: "{{ container_path }}/bin:{{ ansible_env.PATH }}"
  command: "nohup {{ item }}"
  with_items:
  - "asadmin restart-domain {{ container_domain }}"
  - "asadmin list-domains"
  
#---
