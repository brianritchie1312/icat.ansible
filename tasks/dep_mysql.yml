---

#---Install Pexpect---

- name: "{{ play_name }}Installing pexpect"
  pip:
    name: pexpect
    state: latest

#---Downloading Packages for Yum/Apt---

# This is ignored when mysql is not installed or found
- name: "{{ play_name }}Check if Mysql 5.6 is installed"
  command: mysql --version
  register: sql_version
  ignore_errors: yes

- name: "{{ play_name }}Updating mysql package versions to avoid errors"
  set_fact:
#    mysql_pkg_yum: "{{ mysql_pkg_yum_56 }}"
    mysql_pkg_apt: "{{ mysql_pkg_apt_56 }}"
  when:
    - sql_version | failed == false
    - '"5.6" in sql_version.stdout'

- name: "{{ play_name }}Installing MySQL Packages for Yum"
  yum:
    name: "{{ item }}"
    state: latest
  with_items: "{{ mysql_pkg_yum }}"
  when: 
    - ansible_pkg_mgr == "yum"
  tags:
    - yum

- name: "{{ play_name }}Installing MySQL Packages for Apt"
  apt:
    name: "{{ item }}"
    state: latest
  with_items: "{{ mysql_pkg_apt }}"
  when: 
    - ansible_pkg_mgr == "apt"
  tags:
    - apt

#---

#---Modifying Config File---
 # my.cnf is located in different places for each OS, this finds and uses the first file named 'my.cnf' within '/etc/' and it's child directories

- name: "{{ play_name }}Finding my.cnf"
  find:
    paths: /etc
    patterns: 'my.cnf'
    recurse: yes
  register: cnf_path

- name: "{{ play_name }}Configuring my.cnf"
  lineinfile:
    path: "{{ cnf_path.files[0].path }}"
    insertafter: "{{ item.after }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { after: '^\[mysqld\]', regexp: "default_storage_engine", line: "default_storage_engine = {{ mysql_cnf_eng }}" }
    - { after: '^\[mysql\]',  regexp: "local-infile",           line: "local-infile=1" }

#---

#---Starting Mysql Service---
 # Service name is different for different versions and OSs so this finds and uses first file in '/etc/init.d/' that matches 'mysql*'
 # TODO later versions may not use '/init.d/', research alternatives 

- name: "{{ play_name }}Finding MySQL service name"
  find:
    paths: /etc/init.d
    patterns: 'mysql*'
  register: sql_service

- name: "{{ play_name }}Setting Servicename to {{ sql_service.files[0].path | basename }}"
  set_fact:
    mysql_service: "{{ sql_service.files[0].path | basename }}"
  when:
    - sql_service.matched > 0

- name: "{{ play_name }}Setting Servicename to 'mysql' when service can't be found"
  set_fact:
    mysql_service: mariadb
  when:
    - sql_service.matched == 0

- name: "{{ play_name }}Starting database"
  service:
    name: "{{ mysql_service }}"
    state: started

#---Running Secure Install---
 # mysql_secure_installation requires a specific password input, for simplicity the password is reset to default before running mysql_secure_installation
 # If the password is already default (eg. on first run) this task will fail.
 # If it fails for any reason other than permission denied (return code 1) it will fail the build

- name: "{{ play_name }}Temporarly reseting MySQL root password (This will return an error on first run but should ignore it)"
  command: "mysqladmin -u root -p'{{ mysql_root_pass }}' password ''"
  register: sql_pass
  ignore_errors: true

- name: "{{ play_name }}Failing if password reset failed for any reason other than password is blank"
  fail:
    msg: 
      - "Problem with previous task"
      - "If current password for mysql root does not equal '' or '{{ mysql_root_pass }}' (mysql_root_pass variable), then please change mysql_root_pass in config.yml or with '--extra-vars'"
  when:
    - sql_pass|failed
    - sql_pass.rc != 1

#---TODO!---add responses to variable

- name: "{{ play_name }}Running '{{ mysql_secure }}'"
  expect:
    command: mysql_secure_installation
    responses:
      'Enter current password for root \(enter for none\):': "\n"
      'Set root password?': 'y'
      'New password:': "{{ mysql_root_pass }}"
      'Re-enter new password:': "{{ mysql_root_pass }}"
      'Remove anonymous users?': 'y'
      'Disallow root login remotely?': 'y'
      'Remove test database and access to it?': 'y'
      'Reload privilege tables now?': 'y'

#---

#---Creating Database and Login---

- name: "{{ play_name }}Creating database - {{ icat_name }}"
  mysql_db:
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    name: "{{ icat_name }}"
    state: present

- name: "{{ play_name }}Creating Database login - user={{ mysql_user }} pass={{ mysql_pass }}"
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    name: "{{ mysql_user }}"
    password: "{{ mysql_pass }}"
    priv: '*.*:ALL,GRANT'
    state: present

#---
