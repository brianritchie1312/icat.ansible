---

- name: "{{ play_name }}Starting {{ container_domain }} before tasks"
  include: "include_startdomain.yml"

  # This is here since the download_dir must exist, for scripts, before any zips are downloaded
- name: "{{ play_name }}Checking download directory '{{ download_dir }}' - Creating if non-existent"
  file:
    path: "{{ download_dir }}"
    state: directory

#---

#---Checking existing facilities---

- name: "{{ play_name }}Getting ICAT session ID"
  command: "curl -k -X POST -d 'json={\"plugin\" : \"{{ icat_admin_mech }}\", \"credentials\" : [{\"username\":\"root\"},{\"password\":\"{{ icat_admin_pass }}\"}]}' {{ icat_url }}/{{ icat_name }}/session"
  register: icat_sess

- name: "{{ play_name }}Recording Session ID"
  set_fact:
     icat_id: "{{ icat_sess.stdout | replace('\":\"','=') | replace('\"','') | replace('{','') | replace('}','') }}"

- name: "{{ play_name }}Checking existing facilities"
  command: "curl -k -G --data-urlencode \"{{ icat_id }}\" --data-urlencode \"query=SELECT f from Facility f\" {{ icat_url }}/icat/entityManager"
  register: icat_facs

#---

#---Deleting Facility if requested---

 #--Wiping ICAT with Python script--

- name: "{{ play_name }}Wiping ICAT"
  command: "wipeicat.py --url \"{{ icat_url }}/ICATService/ICAT?wsdl\" -a {{ icat_admin_mech }} -u {{ icat_admin_user }} -p {{ icat_admin_pass }}"
  when:
#    - 'fac_short_name in icat_facs.stdout'
    - wipe_icat == true

 #--

 #--Deleting from sql script--

- name: "{{ play_name }}Creating SQL Deletion Scripts"
  template:
    src: "../templates/{{ item }}"
    dest: "{{ download_dir }}"
  with_items:
    - idgrab.sql
    - delusers.sql
  when:
    - 'fac_short_name in icat_facs.stdout'
    - delete_fac == true

- name: "{{ play_name }}Getting {{ fac_short_name }} ID"
  mysql_db:
    state: import
    target: "{{ download_dir }}idgrab.sql"
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    name: "{{ icat_name }}"
  when:
    - 'fac_short_name in icat_facs.stdout'
    - delete_fac == true
  register: sql_msg

- name: "{{ play_name }}Recording Facility ID"
  set_fact:
    icat_fac_id: "{{ sql_msg.msg | replace('ID','') | replace('\\n','') }}"
  when:
    - 'fac_short_name in icat_facs.stdout'
    - delete_fac == true

- name: "{{ play_name }}Deleting facility"
  command: "curl -k --get -X DELETE --data-urlencode \"{{ icat_id  }}\" --data-urlencode 'entities={\"Facility\": {\"id\":{{ icat_fac_id }} } }' {{ icat_url }}/{{ icat_name }}/entityManager"  
  when:
    - 'fac_short_name in icat_facs.stdout'
    - delete_fac == true

- name: "{{ play_name }}Deleting Users"
  mysql_db:
    state: import
    target: "{{ download_dir }}delusers.sql"
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    name: "{{ icat_name }}"
  when:
    - 'fac_short_name in icat_facs.stdout'
    - delete_fac == true

 #--

- name: "{{ play_name }}Checking existing facilities"
  command: "curl -k -G --data-urlencode \"{{ icat_id }}\" --data-urlencode \"query=SELECT f from Facility f\" {{ icat_url }}/icat/entityManager"
  when:
    - '"sessionId=" in icat_id'
    - 'fac_short_name in icat_facs.stdout'
    - ( wipe_icat == true ) or ( delete_fac == true )
  register: icat_facs2    

- name: "{{ play_name }}Recording Existing Facilities"
  set_fact:
    icat_facs: "{{ icat_facs2 }}"
  when:
    - '"sessionId=" in icat_id'
    - 'fac_short_name in icat_facs.stdout'
    - ( wipe_icat == true ) or ( delete_fac == true )

#---

#---Install dependencies for Yum/Apt---

- name: "{{ play_name }}Installing dependencies with Pip"
  pip:
    name: "{{ item }}"
    state: present
  with_items:
    - suds-jurko
    - PyYAML
  become: yes
  become_user: root
  when: 'fac_short_name not in icat_facs.stdout'

- name: "{{ play_name }}Installing dependencies with Yum/Apt"
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ pycat_pkg }}"
  become: yes
  become_user: root
  become_method: sudo
  when:
    - 'fac_short_name not in icat_facs.stdout'

- name: "{{ play_name }}Checking Python version"
  command: python --version
  register: pyv
  when: 'fac_short_name not in icat_facs.stdout'

#---

#---Downloading PyCAT---

- name: "{{ play_name }}Downloading Python-ICAT"
  include: "include_download.yml"
  vars:
    - download_zip: "{{ pycat_zip }}"
    - download_src: "{{ pycat_src }}"
    - download_path: "{{ pycat_path }}"
    - download_dest: "/root/"

#---

#---Patching for Python 2.6---

- name: "{{ play_name }}Patching for Python 2.6"
  patch:
    src: "{{ pycat_path }}/python2_6.patch"
    basedir: "{{ pycat_path }}/"
    remote_src: yes
    strip: 1
  become: yes
  become_user: root
  become_method: sudo
  when: 
    - 'fac_short_name not in icat_facs.stdout'
    - '"2.6." in pyv.stderr'

#---

#---Installing PyCAT---

- name: "{{ play_name }}Building and Installing Python ICAT"
  command: "python setup.py {{ item }}"
  args:
    chdir: "{{ pycat_path }}"
  with_items:
    - build
    - install
  become: yes
  become_user: root
  become_method: sudo
  when: 'fac_short_name not in icat_facs.stdout'

#---Populating Database---

- name: "{{ play_name }}Checking if dump file exists"
  stat:
    path: "{{ download_dir }}{{ ingest_file }}"
  register: pi_ingest
  tags:
    - ingest

- name: "{{ play_name }}Copying Dump file"
  copy:
    src: "../files/{{ ingest_file }}"
    dest: "{{ download_dir }}{{ ingest_file }}"
    force: no
  when: 
    - 'fac_short_name not in icat_facs.stdout'
    - pi_ingest.stat.exists == false
  tags:
    - ingest

- name: "{{ play_name }}Modifying dump file"
  replace:
    path: "{{ download_dir }}{{ ingest_file }}"
    regexp: "{{ item.reg }}"
    replace: "{{ item.rep }}"
  with_items:
    - { reg: "simple",                   rep: "{{ icat_admin_mech }}" }
    - { reg: "LILS",                     rep: "{{ fac_short_name }}" }
    - { reg: "Lorum Ipsum Light Source", rep: "{{ fac_long_name }}" }
  when:
    - 'fac_short_name not in icat_facs.stdout'
  tags:
    - ingest

#TODO-create smaller file so forced timeout is not required

- name: "{{ play_name }}Running ICAT ingest"
  command: "icatingest.py --no-check-certificate --url {{ icat_url }}/ICATService/ICAT?wsdl -a {{ icat_admin_mech }} -u {{ icat_admin_user }} -p {{ icat_admin_pass }} -i {{ download_dir }}{{ ingest_file }}"
  when: 
    - 'fac_short_name not in icat_facs.stdout'
  register: ingest_output
  ignore_errors: yes
  async: "{{ ingest_timeout }}"
  poll: 5
  tags:
    - ingest

- name: "{{ play_name }}Fail if ingest failed for any reason other than async timeout"
  fail:
    msg: "Ingest Failed"
  when:
    - 'fac_short_name not in icat_facs.stdout'
    - '"async task did not complete" not in ingest_output.msg'
    - ingest_ouput.failed == true
  tags:
    - ingest

#---

#---Creating Files---  
 
- name: "{{ play_name }}Creating Datafile grab script"
  template:
    src: "../templates/datafile_grab.sql"
    dest: "{{ download_dir }}"
  when:
    - (create_file == true) or (create_all == true)
  tags:
    - createfiles

 #--Create 'Datafile 1' files--

- name: "{{ play_name }}Writing Datafile grab script for only '{{ datafile }}' files"
  lineinfile:
    path: "{{ download_dir }}datafile_grab.sql"
    regexp: "^select"
    line: "select LOCATION from DATAFILE where NAME = \"{{ item }}\";"
    state: present
  with_items:
    - "{{ datafiles }}"
  when:
    - create_file == true
  tags:
    - createfiles

 #--Create ALL files--

- name: "{{ play_name }}Getting Datafiles"
  mysql_db:
    state: import
    target: "{{ download_dir }}datafile_grab.sql"
    login_user: "root"
    login_password: "{{ mysql_root_pass }}"
    name: "{{ icat_name }}"
  when:
    - (create_file == true) or (create_all == true)
  register: datafile_string
  tags:
    - createfiles

- name: "{{ play_name }}Removing 'LOCATION' string from datafile list"
  set_fact:
    datafile_list: "{{ datafile_string.msg | replace('LOCATION','') }}"
  when:
    - (create_file == true) or (create_all == true)
  tags:
    - createfiles

- name: "{{ play_name }}Removing newline characters from datafile list"
  set_fact:
    datafile_list: "{{ datafile_list.split('\n') }}"
  when:
    - (create_file == true) or (create_all == true)
  tags:
    - createfiles
        

#--CREATING DATAFILES--

- name: "{{ play_name }}Making Directories"
  file:
    state: directory
    name: "{{ user_home }}/{{ icat_name }}/main/{{ item | dirname }}"
    recurse: yes
  with_items:
    - "{{ datafile_list }}"
  when:
    - (create_file == true) or (create_all == true)
  tags:
    - createfiles

- name: "{{ play_name }}Creating files"
  file:
    state: touch
    name: "{{ user_home }}/{{ icat_name }}/main/{{ item }}"
  with_items:
    - "{{ datafile_list }}"
  when:
    - (create_file == true) or (create_all == true)
  tags:
    - createfiles

#---


